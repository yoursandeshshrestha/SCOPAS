generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model coupon {
  id         String   @id @unique
  code       String?
  version    Int?
  storeId    String
  platformId String
  details    String?
  updatedAt  DateTime @default(now()) @updatedAt
  platform   platform @relation(fields: [platformId], references: [id])
  store      store    @relation(fields: [storeId], references: [id])

  @@unique([code, storeId])
}

model platform {
  id      String   @id @unique
  name    String   @unique
  version Int
  coupon  coupon[]
  store   store[]
}

model refresh_tokens {
  id        String   @id
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model store {
  id         String   @id @unique
  name       String
  link       String
  platformId String
  coupon     coupon[]
  platform   platform @relation(fields: [platformId], references: [id])

  @@unique([name, platformId])
}

model users {
  id                   String                 @id
  email                String                 @unique
  name                 String?
  password             String?
  googleId             String?                @unique
  provider             String                 @default("local")
  avatar               String?
  role                 String                 @default("user")
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  refresh_tokens       refresh_tokens[]
  onboarding_responses onboarding_responses[]
  plaid_items          plaid_items[]
  plaid_accounts       plaid_accounts[]
}

model onboarding_questions {
  id                   String                 @id @default(uuid())
  questionNumber       Int                    @unique
  category             String
  questionText         String
  questionType         String                 @default("single-choice") // "single-choice" or "text-input"
  options              String[] // Array of options (4 options for choice questions, empty for text input)
  isActive             Boolean                @default(true)
  order                Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  onboarding_responses onboarding_responses[]

  @@index([questionNumber])
  @@index([isActive])
}

model onboarding_responses {
  id              String                @id @default(uuid())
  userId          String
  questionId      String
  questionNumber  Int
  answer          String // Stores the selected option or text input
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  user            users                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  question        onboarding_questions  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@index([userId])
  @@index([questionNumber])
}

model onboarding_progress {
  id            String    @id @default(uuid())
  userId        String    @unique
  currentStep   Int       @default(0) // 0 = name question, 1-12 = other questions
  isCompleted   Boolean   @default(false)
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  lastUpdatedAt DateTime  @updatedAt

  @@index([userId])
  @@index([isCompleted])
}

model plaid_items {
  id              String           @id @default(uuid())
  userId          String
  itemId          String           @unique
  accessToken     String
  institutionId   String
  institutionName String
  status          String           @default("active")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts        plaid_accounts[]

  @@index([userId])
  @@index([status])
}

model plaid_accounts {
  id               String      @id @default(uuid())
  userId           String
  plaidItemId      String
  accountId        String      @unique
  name             String
  officialName     String?
  type             String
  subtype          String?
  mask             String?
  currentBalance   Float?
  availableBalance Float?
  currency         String      @default("USD")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  user             users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  plaidItem        plaid_items @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([plaidItemId])
}
